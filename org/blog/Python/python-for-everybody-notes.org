#+title: Python for everybody course notes
#+date: <2022-05-19 Thu>
#+author: Morgan Walsh
#+subtitle: Notes on Python course: [[https://www.py4e.com/lessons][py4e]]
#+description: Learn about component state and the component lifecycle.
#+keywords: React JavaScript HTML

---------------

* Install Python

** Ubuntu

To install Python on Ubuntu, use the ~apt~ package manager:

#+caption: Python 3 (default)
#+begin_src shell eval: no
  sudo apt-get install python3
#+end_src

#+caption: Python 3.8
#+begin_src shell eval: no
  sudo apt-get install python3.8
#+end_src

#+caption: Python 2
#+begin_src shell eval: no
  sudo apt-get install python
#+end_src

** Windows

Navigate to [[https://python.org]] and head to the ~Downloads~ page to find executable installers for Python.

[[https://www.python.org/downloads/windows/][Python.org | Windows downloads page]]

* Chapter 1: Why should you learn to write programs?

Programs are good at repeating and carrying out complex tasks which humans may struggle to accurately and consistently perform.

------------------------

** Computer hardware architecture

How parts of a computer might look:

#+begin_example
                -----------
               |  Software |
               |  -------  |        ------------------
[IO Devices]---|-|  CPU  |-|-------| Network          |
               |  -------  |        ------------------
               |     |     |
               |  -------  |        ------------------
               | | Main  |-|-------| Secondary memory |
               | | Memory| |        ------------------
               |  -------  |
               |           |
                -----------
#+end_example

High-level definitions:

- Central Processing Unit (CPU) is the brain of the computer, it carries out calculations at a specific /clock speed/. If a CPU had a clock speed of 3.0GHz, it can perform three billion processor instructions per second. (~Hz~ (Hertz) means times per second while ~G~ (giga) is an SI prefix that means billion.
- Main memory stores information that the CPU needs, such as currently running programs. Main memory has historically been referred to as /RAM/ (Random Access Memory) and is nearly as fast as the CPU. It is a volatile memory that does not persist between restarts.
- Secondary memory are storage devices for storing information, such as HDDs, SSDs, disk drives, flash memory, etc...
- IO devices connect to the computer to allow input and output, these are things like keyboards, mice, monitors, etc...
- Network connections allow computers to retrieve data over a network. Networks can be considered a slower form of secondary memory used for storing and retrieving data, although the difference is that it relies on our internet connectivity speed and the network we are connecting to being up.

Instead of instructing the CPU directly, and its components, with complex instructions directly, we write /programs/ which consist of instructions to be executed.

** Understanding programming

Two skills required to be a programmer:

- Need to know a programming language, along with its vocaublary and grammer - known as its *syntax*.
- Need to be able to tell a story in code that conveys ideas to solve a problem. The /story/ is the program, and the /idea/ is the problem trying to be solved.

Once you can program in one language, you can program in many languages...

** Words and sentences

Pythons vocabulary, like most programming languages, is small. It's vocabulary is referred to as *reserved words*, these have a special meaning in Python programs:

#+begin_example
and del global not with
as elif if or yield
assert else import pass
break except in raise
class finally is return
continue for lambda try
def from nonlocal while
#+end_example

We cannot create variables that have the same name as a reserved keyword in Python.

To print a string of text to the console in Python, use the ~print()~ function:

#+begin_src python :results output :exports both :eval no-export
  print('hello world')
#+end_src

This prints the following text to the console like so:

#+RESULTS:
: hello world

** Conversing with Python

To start interacting with Python, the Python interpreter can be opened by entering ~python~ into a terminal application if it is installed and available on your local path:

#+caption: Python interpreter
#+begin_src shell :eval no
  Python 3.8.10 (default, Mar 15 2022, 12:22:08) 
  [GCC 9.4.0] on linux
  Type "help", "copyright", "credits" or "license" for more information.
  >>>
#+end_src

The ~>>>~ prompt is used to indicate we write input here. Type ~quite()~ in the interactive prompt to exit the interpreter.

** Terminology: Interpreter and compiler

Python is a high-level interpreted language, the actual CPU itself does not understand the Python instructions we write. Instead, the CPU understands a binary code known as *machine language*:

#+begin_example
010010010101010101010101
#+end_example

- CPUs speak in 0's and 1's

Interpreters read the source code of a program, parse it and interpret the instructions when we activate the interpreter - interpreters are having an open conversation with the computer.

Compilers read an entire programs source code and transforms it into machine language for the computer to understand.

Compiled Windows programs often end in ~.exe~ (executable) or ~.dll~ (dynamic link library) whilst compiled Linux and Macintosh programs don't require suffixes to mark a program as executable.

The Python interpreter is written in ~C~, and is open-sourced.

** Writing a program

Typing commands into the interpreter allows for interactive programming, but is not good for solving complex problems. Python allows us to write text files known as *scripts*, with the file ending ~.py~, to store executable Python code.

To execute python code stored in a file, we call the Python interpreter and pass it the file name:

#+begin_src shell :results output :exports both :eval no-export
  cd ~
  echo "print('hello world')" > hello.py
  python3 hello.py
  rm hello.py
#+end_src

Running the file then outputs:

#+RESULTS:
: hello world

After running the file, I used the ~rm~ command to remove it afterwards as it was only temporary.

** The building blocks of programs

Low-level conceptual patterns applied to all programming languages:

- *Input*: Get data from the outside world using input devices
- *Output*: Send data to output devices.
- *Sequential execution*: Perform statements one after the other
- *Conditional execution*: Execute or skip sequences of statements based on conditions
- *Repeated execution*: Repeat a set of statements, usually upto a set limit
- *Reuse*: Sets of instructions can be named and reused throughout a program

** What could possibly go wrong?

Python has many different kinds of error, these indicate something went wrong. If we pass a malformed string to the ~print()~ function, we will get a ~SyntaxError~ indicating Python doesn't quite understand what we are trying to tell it to do:

#+caption: malformed call to print()
#+begin_src python :results output :exports both :eval no
  print(hello world')
#+end_src

This results in the following error:

#+RESULTS:
: File "<stdin>", line 1
:   print(hello world')
:               ^
: SyntaxError: invalid syntax

Pythons different errors include:

- *Syntax errors*: These errors indicate a violation of the languages syntax
- *Logic errors*: These errors indicate the syntax is good, but there is a mistake in how we have applied different operations...
- *Semantic errors*: The syntax is correct, the logic is correct, but the program did not do what was intended.

** Debugging

Debugging is the process of finding errors, there are four things to try:

- *reading*: Read through the code, check that it says what you meant to say.
- *running*: Run the code and experiment by changing values and running different versions
- *ruminating*: Think about the problem... Is it syntactical, logical, semantic? What info do the error messages give? What about the programs output? What kind of error could cause the current problem? What was last changed before the problem appeared?
- *retreating*: Sometimes, undoing recent changes until the program works again can be helpful.

Breaks are often helpful for thinking through a problem, so does explaining the program to yourself, someone else or even in inanimate object like a rubber duck - /rubber duck debugging/.

** Glossary

| Term                    | Description                                                                                                                                                                                                |
|-------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| bug                     | An error in a program.                                                                                                                                                                                     |
| central processing unit | The heart of any computer. It is what runs the software  that we write; also called “CPU” or “the processor”.                                                                                              |
| compile                 | To translate a program written in a high-level language into a low-level language all at once, in preparation for later execution.                                                                         |
| high-level language     | A programming language like Python that is designed to be easy for humans to read and write.                                                                                                               |
| interactive mode        | A way of using the Python interpreter by typing commands and expressions at the prompt.                                                                                                                    |
| interpret               | To execute a program in a high-level language by translating it one line at a time.                                                                                                                        |
| low-level language      | A programming language that is designed to be easy for a computer to execute; also called “machine code” or “assembly language”.                                                                           |
| machine code            | The lowest-level language for software, which is the language that is directly executed by the central processing unit (CPU).                                                                              |
| main memory             | Stores programs and data. Main memory loses its information when the power is turned off.                                                                                                                  |
| parse                   | To examine a program and analyze the syntactic structure.                                                                                                                                                  |
| portability             | A property of a program that can run on more than one kind of computer.                                                                                                                                    |
| print function          | An instruction that causes the Python interpreter to display avalue on the screen.                                                                                                                         |
| problem solving         | The process of formulating a problem, finding a solution, andexpressing the solution.                                                                                                                      |
| program                 | A set of instructions that specifies a computation.                                                                                                                                                        |
| prompt                  | When a program displays a message and pauses for the user to type someinput to the program.                                                                                                                |
| secondary memory        | Stores programs and data and retains its information evenwhen the power is turned off. Generally slower than main memory. Examples of secondary memory include disk drives and flash memory in USB sticks. |
| semantics               | The meaning of a program.                                                                                                                                                                                  |
| semantic error          | An error in a program that makes it do something other than what the programmer intended.                                                                                                                  |
| source code             | A program in a high-level language                                                                                                                                                                         |

* Chapter 2: Variables, expressions, and statements

** Values and types

A ~value~ is a basic piece of data that the computer works with, each value has a data type:

- *string*'s represent sequence of characters, the characters are enclosed in double or single quotes
- *integer*'s represent numeric whole numbers

#+caption: Simple data types
#+begin_src python :results output :exports both :eval no-export
  print(type('I am string'))
  print(type(89))
#+end_src

The ~type()~ function returns the type of the data we pass it, in this case a string is represented by
a class caled ~str~ and integer a class called ~int~:

#+RESULTS:
: <class 'str'>
: <class 'int'>

We also having decimal numbers, these are called *floating-point numbers*:

#+caption: Float data type
#+begin_src python :results output :exports both :eval no-export
  print(type(89.34))
#+end_src

As can be seen, this outputs that the number ~89.34~ is of type ~float~:

#+RESULTS:
: <class 'float'>

** Variables

A *variable* is a name which refers to a value, we use /assignment statements/ to create new variables and
initialise them with values:

#+caption: Declaring variables of various types
#+name: declare-data-types
#+begin_src python :results silent :exports code :session chapter2 :eval no-export
  aString = 'hello world'
  aInteger = 32
  aFloat = 3.14
  aBoolean = True
#+end_src

We have declared four variables above and initialised them to different types using the assignment operator (~=~), we can reference
a variable using its name:

#+caption: Printing out a variable
#+begin_src python :results output :exports both :session chapter2 :eval no-export
  print(aString) # outputs the value of aString to the console
#+end_src

Passing ~aString~ to the ~print()~ function as input prints the value of the variable to the console:

#+RESULTS:
: hello world

We can also check its type with ~type(aString)~:

#+begin_src python :results value :exports results :session chapter2 :eval no-export
  type(aString)
#+end_src

#+RESULTS:
: <class 'str'>

** Variable names and keywords

Variable names should be meaningful and document what the variable is used for:

- they should not be arbitrarily long.
- they can contain both letters and numbers but not special characters.
- they must not start with a number
- uppercase letters are allowed
- underscores are allowed in any position

Trying to give a variable an illegal name will throw a syntax error.

** Statements

A *statement* is an executable unit of code, ~print~ is an expression statement and assignment being another statement.

Scripts may contain sequences of statements, assignment statements produce no output.

** Operators and operands

Operators include: ~+~, ~-~, ~*~, */* and **** perform addition, subtraction, multiplication, division and exponentiation respectively.

In Python3, division returns a float. In Python 2, division returns a truncated integer. To obtain the same answer, use floored division with the ~//~ operator.

#+begin_src python :results output :exports both :eval no-export
  print('10 / 3 = ', (10 / 3))
  print('10 // 3 = ', (10 // 3))
#+end_src

These two statements produce the following output in Python 3:

#+RESULTS:
: 10 / 3 =  3.3333333333333335
: 10 // 3 =  3

** Expressions

** Order of operations

** Modulus operator

** String operations

** Asking the user for input

** Comments

** Debugging

** Glossary



