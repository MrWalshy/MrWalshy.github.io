#+title: Lifting state in React
#+date: <2022-05-19 Thu>
#+author: Morgan Walsh
#+description: Learn about lifting state in React
#+keywords: React JavaScript HTML state
#+subtitle: An introduction to lifting state in components

If you haven't read [[./state.org][State with React Hooks]] yet, it could be useful :)

------------------------------

We often add state to components that need it, but what happens if we have multiple components that require the same state... In this article, we will look at how we can share a common state throughout multiple components.

-----------------------------

** The application

This article will build a simple todo list application, without CSS styling, to demonstrate the use of lifting state.

** The parts of the application

In this section, we will explore the different objects and components in the application.

*** The ~Todo~ function

The ~Todo~ object is represented by a function which initialiases its values:

#+name: todo-function
#+caption: The Todo function
#+begin_src js :exports code :eval no-export
  function Todo(id, task, priority) {
    this.id = id;
    this.task = task;
    this.priority = priority;
  }
#+end_src

This function can be used to create ~Todo~ objects which have an id, task and priority.

*** The ~TodoItem~ React component

The ~TodoItem~ is a React function component:

#+name: todo-item-function-component
#+caption: The TodoItem function component
#+begin_src js :exports code :eval no-export
  function TodoItem({ todo }) {
    return (
      <tr>
        <td>{todo.task}</td>
        <td>{todo.priority}</td>
      </tr>
    );
  }
#+end_src

*** The ~TodoList~ React component

The ~TodoList~ component renders a todo list with todo items and an add todo input bar:

#+name: todo-list-function-component
#+caption: The TodoList function component
#+begin_src js :exports code :eval no-export
  function TodoList() { 
    const [todos, setTodos] = React.useState([ 
        new Todo(1, "Feed dog", "HIGH"), 
        new Todo(2, "Cook tea", "HIGH"), 
        new Todo(3, "Rick roll mother", "HIGH"), 
        new Todo(4, "Learn about politics", "LOW") 
    ]); 

    // these variables are used by a form for tracking changes
    // to the new todo input fields
    const [task, setTask] = React.useState(null);
    const [priority, setPriority] = React.useState("HIGH");
    
    function addTodo(event) { 
        event.preventDefault(); 
        // create a new todo using the values of the state we are tracking
        const todo = new Todo(Math.floor(Math.random() * 5000), task, priority); 
        
        setTodos(previousState => { 
            // use the spread operator to copy all of the items in the previous state of
            // todos into a new array, and we then also supply the new todo into the new array
            return [...previousState, todo]; 
        }); 
    }

    function handleChange(event) {
        // get the name attribute of the element that changed
        const name = event.target.name;
        // get the value of the element that changed
        const value = event.target.value;

        // decide which piece of state to update
        switch (name) {
            case "task":
                setTask(value);
                break;
            case "priority":
                setPriority(value);
        }
    }
    
    return ( 
        <div> 
            {/* This table renders the todo lists currently tracked in state */}
            <table> 
                <thead> 
                    <tr>
                        <th>Task</th> 
                        <th>Priority</th> 
                    </tr>
                </thead> 
                <tbody> 
                    {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}
                </tbody> 
            </table> 

            {/* this form is for adding new todos */}
            <form onSubmit={addTodo}> 
                <label htmlFor="task">Task</label> 
                <input id="task" name="task" type="text" placeholder="Feed the dog" required onChange={handleChange} /> 
                
                <label htmlFor="priority">Priority</label> 
                <select id="priority" name="priority" size="2" defaultValue="HIGH" required onChange={handleChange}> 
                    <option value="HIGH">High</option> 
                    <option value="LOW">Low</option> 
                </select>
                <br /><br />
                <button type="submit">Add todo</button>
            </form> 
        </div> 
    ); 
  }
#+end_src

In the current design, our state is in the component which makes sense - the ~TodoList~ - but it does not make sense for the state for creating a new todo item to be managed
in the parent ~TodoList~ component.

We can refactor the ~TodoList~ to use a ~AddTodo~ component:

#+name: add-todo-item-function-component
#+caption: The AddTodoItem function component
#+begin_src js :exports code :eval no-export
  function AddTodoItem(props) {

    const [task, setTask] = React.useState(null);
    const [priority, setPriority] = React.useState("HIGH");

    function handleChange(event) {
        const name = event.target.name;
        const value = event.target.value;
        console.log(name);
        switch (name) {
            case "task":
                setTask(value);
                break;
            case "priority":
                setPriority(value);
        }
    }

    return (
        <form> 
            <label htmlFor="task">Task</label> 
            <input id="task" name="task" type="text" placeholder="Feed the dog" required onChange={handleChange} /> 
            
            <label htmlFor="priority">Priority</label> 
            <select id="priority" name="priority" size="2" defaultValue="HIGH" required onChange={handleChange}> 
                <option value="HIGH">High</option> 
                <option value="LOW">Low</option> 
            </select>
            <br /><br />
            <button type="submit">Add todo</button>
        </form> 
    );
  }
#+end_src

Now that we have this component, we can use it in the ~TodoList~ instead of leaving the form directly in there:

#+name: todolist-revised-function-component
#+caption: The TodoList function component, slightly revised
#+begin_src js :exports code :eval no-export
  function TodoList() {

    // if multiple components require the same state (values), 
    // we put the state in the highest parent component which requires that state
    // otherwise we should put the state only in the component that needs it

    const [todos, setTodos] = React.useState([ 
        new Todo(1, "Feed dog", "HIGH"), 
        new Todo(2, "Cook tea", "HIGH"), 
        new Todo(3, "Rick roll mother", "HIGH"), 
        new Todo(4, "Learn about politics", "LOW") 
    ]); 
    
    return ( 
        <div> 
            <table> 
                <thead> 
                    <tr>
                        <th>Task</th> 
                        <th>Priority</th> 
                    </tr>
                </thead> 
                <tbody> 
                    {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}
                </tbody> 
            </table> 
            <AddTodoItem />
        </div> 
    ); 
}
#+end_src

Now, the problem is: How do we create a new todo item in the ~AddTodoItem~ component and insert it into the array of todos in ~TodoList~?

To solve this, we should pass the ~setTodos~ function which controls the state of ~todos~ as props to the component that will need to modify the array. This will
look as follows:

#+name: todolist-revised-function-component
#+caption: The TodoList function component revised
#+begin_src js :exports code :eval no-export
  function TodoList() {

    // if multiple components require the same state (values), 
    // we put the state in the highest parent component which requires that state
    // otherwise we should put the state only in the component that needs it

    const [todos, setTodos] = React.useState([ 
        new Todo(1, "Feed dog", "HIGH"), 
        new Todo(2, "Cook tea", "HIGH"), 
        new Todo(3, "Rick roll mother", "HIGH"), 
        new Todo(4, "Learn about politics", "LOW") 
    ]); 
    
    return ( 
        <div> 
            <table> 
                <thead> 
                    <tr>
                        <th>Task</th> 
                        <th>Priority</th> 
                    </tr>
                </thead> 
                <tbody> 
                    {todos.map(todo => <TodoItem key={todo.id} todo={todo} />)}
                </tbody> 
            </table> 
            <AddTodoItem setTodos={setTodos} />
        </div> 
    ); 
}
#+end_src

The key part is ~<AddTodoItem setTodos={setTodos} />~ where we pass the function as props. We then modify ~AddTodoItem~ to destructure ~setTodos~ from props
and create an additional ~addTodo~ function which is called when the form is submitted:

#+name: add-todo-item-function-component
#+caption: The AddTodoItem function component
#+begin_src js :exports code :eval no-export
  function AddTodoItem({ setTodos }) {

    const [task, setTask] = React.useState(null);
    const [priority, setPriority] = React.useState("HIGH");

    function handleChange(event) {
        // ...
    }

    // use the setTodos function to lift the new todo item into the todos array
    function addTodo(event) { 
        event.preventDefault(); 
        const todo = new Todo(Math.floor(Math.random() * 5000), task, priority); 

        setTodos(previousState => { 
            return [...previousState, todo]; 
        }); 
    }

    return (
        <form onSubmit={addTodo}> 
            <label htmlFor="task">Task</label> 
            <input id="task" name="task" type="text" placeholder="Feed the dog" required onChange={handleChange} /> 

            <label htmlFor="priority">Priority</label> 
            <select id="priority" name="priority" size="2" defaultValue="HIGH" required onChange={handleChange}> 
                <option value="HIGH">High</option> 
                <option value="LOW">Low</option> 
            </select>
            <br /><br />
            <button type="submit">Add todo</button>
        </form> 
    );
  }
#+end_src

This will then lift the new state, when the form is submitted, into the ~TodoList~ component which passes the ~setTodos~ function.



