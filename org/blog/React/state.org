#+title: State with React hooks
#+date: <2022-05-18 Wed>
#+author: Morgan Walsh
#+description: Learn about component state and the component lifecycle.
#+keywords: React JavaScript HTML
#+subtitle: An introduction to component state

In React, we often want to create dynamic components where the data inside them could change. Using props, we cannot do this unless we re-render the whole component manually. React components have a built-in ~state~ object for managing data that is subject to change, when this object changes the component will be re-rendered.

** Adding state to a component

Hooks were added to React in version 16.8, these allow function components to access their state and lifecycle.

#+begin_quote
Class components are generally not needed anymore due to this.
#+end_quote

There are multiple hooks available in React that can be imported from ~react~:

- ~useState()~
- ~useEffect()~
- ~useContext()~
- ~useRef()~
- ~useMemo()~

There are 3 rules with React hooks:

1. Hooks can only be called inside function components
2. Hooks can only be called at the top level of a component
3. Hooks cannot be conditional

The ~useState~ hook is for tracking state in a function component, the data that is subject to change.

The first step is to import the ~useState~ hook:

#+begin_src js :exports code :eval no
  import { useState } from 'react';
#+end_src

Once we have imported the function, we can initialise state in components using it. ~useState~ accepts the initial state and returns two values:

1. The current state
2. A function for updating said state

#+begin_src js :exports code :eval no
  const UserEditForm = (props) => {

    const [age, setAge] = useState(props.age);

    return (
      <form>
        <h3>{props.user.username} | Edit profile</h3>
        {/*
           The input is data that changes during the lifecycle of the component, this represents state and will be explored in a different article.
         ,*/}
         <label htmlFor="age">Age: </label>
         <input type="number"
                id="age"
                defaultValue={age} />
       </form>
    );
  }
#+end_src

Once the state is initialised, it can be used anywhere in the component.

** Updating state

To update state, we must not access the variable directly. Instead, we should use the mutator function provided by the ~useState~ hook.

#+name: user-edit-form
#+begin_src js :exports code :eval no
  const UserEditForm = (props) => {

    const [age, setAge] = useState(props.user.age);

    const updateAge = (event) => setAge(event.target.value);

    return (
      <form>
        <h3>{props.user.username} | Edit profile</h3>
        {/*
           The input is data that changes during the lifecycle of the component, this represents state and will be explored in a different article.
         ,*/}
         <label htmlFor="age">Age: </label>
         <input type="number"
                id="age"
                defaultValue={age}
                onChange={this.updateAge} />
       </form>
    );
  }
#+end_src

If we then pass a prop named ~user~, with the username and age properties, to the component - ~<UserEditForm user={user} />~ - it will render a form for us
with the ability to modify the value of age. Given the following object:

#+name: user
#+begin_src js :exports code :eval no
  const user = {
    username: "Fred",
    age: 32
  };
#+end_src

was passed as a prop to the edit form component, it would render the following HTML:

#+RESULTS: render-user-edit-form
: <form>
:     <h3>Fred | Edit profile</h3>
:     <label for="age">Age:</label>
:     <input type="number" id="age" value="32" />
: </form>

#+name: render-user-edit-form
#+begin_src js :results output :exports results :noweb yes :cmd "org-babel-node --presets react" :eval no-export
  const React = require('react');
  const useState = React.useState;
  const ReactDOMServer = require('react-dom/server');
  const renderToStaticMarkup = ReactDOMServer.renderToStaticMarkup;
  const beautify = require('simply-beautiful');

  <<user-edit-form>>
  <<user>>

  let markup = renderToStaticMarkup(<UserEditForm user={user} />);
  console.log(beautify.html(markup));
#+end_src


